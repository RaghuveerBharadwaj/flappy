{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","React","useEffect","engine","render","element","pixelRatio","width","height","World","Matter","Engine","Render","Bodies","Body","Events","handleResize","window","location","reload","handleKeydown","event","keyCode","bumpBird","handleTouchstart","handleClick","preventDefault","bird","Bird","this","x","y","w","static","body","circle","restitution","createWall","cut","getRandomIntInclusive","hole","h1","h2","y1","y2","wall","top","rectangle","isStatic","bottom","walls","push","add","world","removeWall","remove","shift","moveWalls","collision","start","forEach","i","position","document","getElementById","play","score","scoreDisplay","innerText","t","translate","prototype","addBird","removeBird","setHit","fillStyle","strokeStyle","sad","sprite","xScale","yScale","gui","startButton","resetButton","fail","createBird","b","p","applyForce","startGame","gravity","style","display","endGame","resetGame","min","max","Math","floor","random","onload","devicePixelRatio","innerWidth","innerHeight","create","options","background","hasBounds","enabled","wireframes","showSleeping","showDebug","showBroadphase","showBounds","showVelocity","showCollisions","showSeparations","showAxes","showPositions","showAngleIndicator","showIds","showShadows","showVertexNumbers","showConvexHulls","showInternalEdges","showMousePosition","addEventListener","h","ceil","createGround","run","on","createElement","id","src","type","Boolean","hostname","match","ReactDOM","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5f870c8a.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport * as Matter from \"matter-js\";\n\nfunction App() {\n  React.useEffect(() => {\n    /**\n     *\n     * Flappy Bird Game\n     *\n     * Use spacebar or click to jump and avoid walls\n     * Source : J Scott Smith\n     *\n     */\n\n    /* =====================================================\n     * Setup Matter Engine\n     * ================================================== */\n\n    // Aliases\n    let World = Matter.World;\n    let Engine = Matter.Engine;\n    let Render = Matter.Render;\n    let Bodies = Matter.Bodies;\n    let Body = Matter.Body;\n    let Events = Matter.Events;\n\n    let engine;\n    let render;\n    let element;\n    let pixelRatio;\n    let width;\n    let height;\n\n    function setupMatter() {\n      element = document.getElementById(\"main\");\n      pixelRatio = window.devicePixelRatio || 1;\n      width = window.innerWidth;\n      height = window.innerHeight;\n\n      engine = Engine.create();\n\n      // set the gravity to zero before the game starts\n      engine.world.gravity.y = 0;\n\n      // create the renderer with options\n      render = Render.create({\n        element: element,\n        engine: engine,\n        options: {\n          width: width,\n          height: height,\n          pixelRatio: pixelRatio,\n          background: \"orange\",\n          hasBounds: false,\n          enabled: false,\n          wireframes: false,\n          showSleeping: false,\n          showDebug: false,\n          showBroadphase: false,\n          showBounds: false,\n          showVelocity: false,\n          showCollisions: false,\n          showSeparations: false,\n          showAxes: false,\n          showPositions: false,\n          showAngleIndicator: false,\n          showIds: false,\n          showShadows: false,\n          showVertexNumbers: false,\n          showConvexHulls: false,\n          showInternalEdges: false,\n          showMousePosition: false,\n        },\n      });\n    }\n\n    /* =====================================================\n     * Event Listener and Handlers\n     * ================================================== */\n\n    function addEventListeners() {\n      window.addEventListener(\"click\", handleClick, false);\n      window.addEventListener(\"touchstart\", handleTouchstart, false);\n      window.addEventListener(\"keydown\", handleKeydown, false);\n      window.addEventListener(\"resize\", handleResize, false);\n    }\n\n    function handleResize() {\n      window.location.reload();\n    }\n\n    function handleKeydown(event) {\n      // spacebar\n      if (event.keyCode === 32) {\n        bumpBird();\n      }\n    }\n\n    function handleTouchstart(event) {\n      bumpBird();\n    }\n\n    function handleClick(event) {\n      event.preventDefault();\n      bumpBird();\n    }\n\n    /* =====================================================\n     * The Bird Class\n     * ================================================== */\n\n    let Bird = function () {\n      this.x = 200;\n      this.y = 200;\n      this.w = 30;\n      this.static = true;\n      this.body = Bodies.circle(this.x, this.y, this.w, this.static);\n      // this.body.render.sprite.texture = 'https://www.stickpng.com/assets/thumbs/584c69846e7d5809d2fa6366.png'\n      // this.body.render.sprite.xScale = .2\n      // this.body.render.sprite.yScale = .2\n      this.body.restitution = 0.1;\n    };\n\n    Bird.prototype.addBird = function () {\n      World.add(engine.world, this.body);\n    };\n\n    Bird.prototype.removeBird = function () {\n      World.remove(engine.world, this.body);\n    };\n\n    Bird.prototype.setHit = function () {\n      this.body.render.fillStyle = \"tomato\";\n      this.body.render.strokeStyle = \"red\";\n    };\n\n    Bird.prototype.sad = function () {\n      this.body.render.sprite.xScale = 1;\n      this.body.render.sprite.yScale = 1;\n    };\n\n    /* =====================================================\n     * The Walls\n     * ================================================== */\n\n    function createWall() {\n      let w = 20;\n      let x = width + w / 2;\n      // let maxH = height - 20 * 4; // height minus ground and then some\n\n      let cut = getRandomIntInclusive(20, height - 80);\n      let hole = getRandomIntInclusive(80, 160);\n\n      let h1 = height - 20 - cut - hole;\n      let h2 = cut - hole;\n\n      let y1 = h1 / 2;\n      let y2 = height - h2 / 2 - 20;\n\n      let wall = {\n        top: Bodies.rectangle(x, y1, w, h1, { isStatic: true }),\n        bottom: Bodies.rectangle(x, y2, w, h2, { isStatic: true }),\n      };\n\n      // add body to walls array so the wall's position will be updated on each loop\n      walls.push(wall);\n\n      World.add(engine.world, [wall.top, wall.bottom]);\n    }\n\n    function removeWall(wall) {\n      World.remove(engine.world, [wall.top, wall.bottom]);\n      walls.shift();\n    }\n\n    function moveWalls() {\n      if (collision || !start) return;\n\n      walls.forEach((wall, i) => {\n        // remove the wall when it's out of view\n        if (wall.top.position.x < -30) {\n          removeWall(wall);\n          var x = document.getElementById(\"myScore\");\n          x.play();\n          increaseScore(1);\n          createWall();\n        }\n\n        // point to translate the wall\n        let t = { x: -6, y: 0 };\n        Body.translate(wall.top, t);\n        Body.translate(wall.bottom, t);\n      });\n    }\n\n    /* =====================================================\n     * The Game Bodies\n     * ================================================== */\n\n    let bird;\n    let walls = [];\n    let score = 0;\n    let start = false;\n    let collision = false;\n\n    function createBird() {\n      // Adds the bird to the world\n      bird = new Bird();\n      bird.addBird();\n    }\n\n    function createGround() {\n      let h = 20;\n      let x = width / 2;\n      let y = height - h / 2;\n      let w = width;\n\n      let ceil = Bodies.rectangle(x, y - height, w, h, { isStatic: true });\n      let floor = Bodies.rectangle(x, y, w, h, { isStatic: true });\n\n      World.add(engine.world, [ceil, floor]);\n    }\n\n    function bumpBird() {\n      var x = document.getElementById(\"myAudio\");\n      x.play();\n      // Applies an upward force to the bird\n      // TODO: need to limit the height, check if\n      // the body is on screen before bumping again\n      // or alternatively have a ceiling that you hit\n      if (collision || !start) return;\n\n      // Body to apply force to\n      let b = bird.body;\n\n      // Position to apply Force is at\n      // the birds current position\n      let p = bird.body.position;\n\n      // Force vector to be applied\n      let f = {\n        x: 0,\n        y: -0.03,\n      };\n\n      Body.applyForce(b, p, f);\n    }\n\n    /* =====================================================\n     * The Game\n     * ================================================== */\n\n    function runMatter() {\n      // init the engine and renderer\n      Engine.run(engine);\n      Render.run(render);\n\n      // Listeners for the game\n\n      // Update the walls when the engine updates\n      Events.on(engine, \"tick\", moveWalls);\n\n      // Collision Event ends the game :-(\n      Events.on(engine, \"collisionStart\", endGame);\n    }\n\n    function startGame() {\n      start = true;\n      engine.world.gravity.y = 0.7;\n      // set the bird to static at first\n      startButton.style.display = \"none\";\n    }\n\n    function endGame() {\n      var x = document.getElementById(\"sad\");\n      x.play();\n      collision = true;\n      bird.setHit();\n\n      bird.sad();\n      fail.style.display = \"block\";\n    }\n\n    function resetGame() {\n      startButton.style.display = \"block\";\n      fail.style.display = \"none\";\n\n      resetScore();\n      start = false;\n      collision = false;\n      engine.world.gravity.y = 0;\n\n      // remove bodies\n      bird.removeBird();\n      walls.forEach((wall) => {\n        removeWall(wall);\n      });\n\n      walls = [];\n\n      // add new bodies\n      createBird();\n      createWall();\n    }\n\n    /* =====================================================\n     * The GUI\n     * ================================================== */\n\n    let scoreDisplay;\n    let gui;\n    let startButton;\n    let resetButton;\n    let fail;\n\n    function setupGUI() {\n      scoreDisplay = document.getElementById(\"score\");\n      scoreDisplay.innerText = score;\n\n      gui = document.getElementById(\"gui\");\n\n      startButton = document.getElementById(\"start\");\n      resetButton = document.getElementById(\"reset\");\n      fail = document.getElementById(\"fail\");\n      fail.style.display = \"none\";\n\n      // Button listeners\n      startButton.addEventListener(\"click\", startGame, false);\n      resetButton.addEventListener(\"click\", resetGame, false);\n    }\n\n    function resetScore() {\n      score = 0;\n      scoreDisplay.innerText = score;\n    }\n\n    function increaseScore(points) {\n      score += points;\n      scoreDisplay.innerText = score;\n    }\n\n    /* =====================================================\n     * Utilities\n     * ================================================== */\n\n    function getRandomIntInclusive(min, max) {\n      return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n\n    /* =====================================================\n     * Kickoff\n     * ================================================== */\n\n    window.onload = init();\n\n    // Initializes the game\n    function init() {\n      // Setup the Matter engine and renderer\n      setupMatter();\n\n      // Add event listeners\n      addEventListeners();\n\n      // Add the necessary Matter bodies to the world\n      createBird();\n      createWall();\n      createGround();\n\n      // GUI\n      setupGUI();\n\n      // Runs the engine and renderer\n      runMatter();\n    }\n  });\n  return (\n    <div id=\"main\">\n      <div id=\"gui\">\n        <audio id=\"myAudio\">\n          <source\n            src=\"http://s1download-universal-soundbank.com/mp3/sounds/22372.mp3\"\n            type=\"audio/mpeg\"\n          />\n        </audio>\n        <audio id=\"sad\">\n          <source\n            src=\"http://shing.mobile9.com/download/media/702/angrybirds_oaw366ij.mp3\"\n            type=\"audio/mpeg\"\n          />\n        </audio>\n        <audio id=\"myScore\">\n          <source\n            src=\"http://plantsvszombies.clan.su/publfiles/downloads/soundspvz/points.mp3\"\n            type=\"audio/mpeg\"\n          />\n        </audio>\n        <span id=\"score\"></span>\n        <button id=\"start\">Start</button>\n        <div id=\"fail\" style={{ display: \"none\" }}>\n          <h2>GAME OVER</h2>\n          <button id=\"reset\">Restart</button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}